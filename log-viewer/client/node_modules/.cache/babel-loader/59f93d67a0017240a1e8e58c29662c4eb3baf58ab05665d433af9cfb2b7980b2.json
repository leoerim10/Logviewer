{"ast":null,"code":"var _jsxFileName = \"D:\\\\Docs\\\\Uni\\\\WiSe22\\\\thesis\\\\impl\\\\log-viewer\\\\client\\\\src\\\\components\\\\SortedList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItemButton';\nimport ListItemText from '@mui/material/ListItemText';\nimport Divider from '@mui/material/Divider';\nimport Chip from '@mui/material/Chip';\nimport Stack from '@mui/material/Stack';\nimport Box from '@mui/material/Box';\n\n// Style to be applied to the list component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst style = {\n  width: '100%',\n  maxWidth: 360,\n  bgcolor: 'background.paper'\n};\n\n/**\r\n * This function takes an array of log objects and returns a dictionary with the count\r\n * of each unique 'step' value in the array.\r\n * \r\n * @param {Object[]} arr - An array of log objects.\r\n * @param {string} arr[].step - A 'step' value in the log object.\r\n * \r\n * @returns {Object} - A dictionary with the count of each unique 'step' value in the array.\r\n */\nfunction collectStepValues(arr) {\n  let counts = {};\n  arr.map(el => {\n    // If the 'step' value is already in the dictionary, increment its count by 1.\n    // Otherwise, create a new entry for the 'step' value with a count of 1.\n    if (counts[el.step]) {\n      counts[el.step] = counts[el.step] + 1;\n    } else {\n      counts[el.step] = 1;\n    }\n  });\n\n  // Calculate the total count of all 'step' values.\n  let tot = Object.values(counts).reduce(function (a, b) {\n    return a + b;\n  }, 0);\n  return counts;\n}\n\n// A functional component that renders a list of 'step' values with their counts and\n// allows the user to filter the log data based on a selected 'step' value.\nexport default function SortedList(props) {\n  _s();\n  // Get the count of each 'step' value in the log data.\n  let valCounts = collectStepValues(props.logObj);\n  // Calculate the total count of all 'step' values.\n  const totaldata = Object.values(valCounts).reduce(function (a, b) {\n    return a + b;\n  }, 0);\n  // A state variable to hold the color of the list items.\n  const [color, setColor] = useState('#' + Math.floor(Math.random() * 16777215).toString(16));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        display: \"inline-flex\",\n        children: /*#__PURE__*/_jsxDEV(Stack, {\n          direction: \"row\",\n          spacing: 1,\n          children: /*#__PURE__*/_jsxDEV(Chip, {\n            label: 'Total log data: ' + totaldata,\n            color: \"success\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      sx: style,\n      component: \"nav\",\n      \"aria-label\": \"mailbox folders\",\n      children: Object.keys(valCounts).map(e => {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(ListItem, {\n            button: true,\n            style: {\n              color: color\n            },\n            onClick: () => {\n              // Call the 'filterAttr' function passed as a prop to filter the log data by 'step' value.\n              props.filterAttr(e);\n              // Update the color of the list item to a random color.\n              setColor('#' + Math.floor(Math.random() * 16777215).toString(16));\n            },\n            children: /*#__PURE__*/_jsxDEV(ListItemText, {\n              primary: e + ':  ' + valCounts[e]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(SortedList, \"D8hq9eJfw631uCNPaOhofvxmIGc=\");\n_c = SortedList;\nvar _c;\n$RefreshReg$(_c, \"SortedList\");","map":{"version":3,"names":["React","useEffect","useState","List","ListItem","ListItemText","Divider","Chip","Stack","Box","style","width","maxWidth","bgcolor","collectStepValues","arr","counts","map","el","step","tot","Object","values","reduce","a","b","SortedList","props","valCounts","logObj","totaldata","color","setColor","Math","floor","random","toString","keys","e","filterAttr"],"sources":["D:/Docs/Uni/WiSe22/thesis/impl/log-viewer/client/src/components/SortedList.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItemButton';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport Divider from '@mui/material/Divider';\r\nimport Chip from '@mui/material/Chip';\r\nimport Stack from '@mui/material/Stack';\r\nimport Box from '@mui/material/Box';\r\n\r\n// Style to be applied to the list component\r\nconst style = {\r\n  width: '100%',\r\n  maxWidth: 360,\r\n  bgcolor: 'background.paper',\r\n};\r\n\r\n/**\r\n * This function takes an array of log objects and returns a dictionary with the count\r\n * of each unique 'step' value in the array.\r\n * \r\n * @param {Object[]} arr - An array of log objects.\r\n * @param {string} arr[].step - A 'step' value in the log object.\r\n * \r\n * @returns {Object} - A dictionary with the count of each unique 'step' value in the array.\r\n */\r\nfunction collectStepValues(arr) {\r\n  let counts = {};\r\n  arr.map((el) => {\r\n    // If the 'step' value is already in the dictionary, increment its count by 1.\r\n    // Otherwise, create a new entry for the 'step' value with a count of 1.\r\n    if (counts[el.step]) {\r\n      counts[el.step] = counts[el.step] + 1;\r\n    } else {\r\n      counts[el.step] = 1;\r\n    }\r\n  });\r\n\r\n  // Calculate the total count of all 'step' values.\r\n  let tot = Object.values(counts).reduce(function (a, b) {\r\n    return a + b;\r\n  }, 0);\r\n  return counts;\r\n}\r\n\r\n// A functional component that renders a list of 'step' values with their counts and\r\n// allows the user to filter the log data based on a selected 'step' value.\r\nexport default function SortedList(props) {\r\n  // Get the count of each 'step' value in the log data.\r\n  let valCounts = collectStepValues(props.logObj);\r\n  // Calculate the total count of all 'step' values.\r\n  const totaldata = Object.values(valCounts).reduce(function (a, b) {\r\n    return a + b;\r\n  }, 0);\r\n  // A state variable to hold the color of the list items.\r\n  const [color, setColor] = useState('#' + Math.floor(Math.random() * 16777215).toString(16));\r\n\r\n  return (\r\n    <div>\r\n      {/* Display the total count of all 'step' values. */}\r\n      <p>\r\n        <Box display=\"inline-flex\">\r\n          <Stack direction=\"row\" spacing={1}>\r\n            <Chip label={'Total log data: ' + totaldata} color=\"success\"></Chip>\r\n          </Stack>\r\n        </Box>\r\n      </p>\r\n      {/* Render a list of 'step' values with their counts. */}\r\n      <List sx={style} component=\"nav\" aria-label=\"mailbox folders\">\r\n        {Object.keys(valCounts).map((e) => {\r\n          return (\r\n            <>\r\n              <ListItem\r\n                button\r\n                style={{ color: color }}\r\n                onClick={() => {\r\n                  // Call the 'filterAttr' function passed as a prop to filter the log data by 'step' value.\r\n                  props.filterAttr(e);\r\n                  // Update the color of the list item to a random color.\r\n                  setColor('#' + Math.floor(Math.random() * 16777215).toString(16));\r\n                }}\r\n              >\r\n                <ListItemText primary={e + ':  ' + valCounts[e]} />\r\n              </ListItem>\r\n              <Divider />\r\n            </>\r\n          );\r\n        })}\r\n      </List>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}