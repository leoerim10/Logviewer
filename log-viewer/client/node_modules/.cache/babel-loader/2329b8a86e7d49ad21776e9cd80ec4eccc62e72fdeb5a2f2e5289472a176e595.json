{"ast":null,"code":"var _jsxFileName = \"D:\\\\Docs\\\\Uni\\\\WiSe22\\\\thesis\\\\impl\\\\log-viewer\\\\client\\\\src\\\\components\\\\MyDropzone.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, createRef, useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { Card } from '@mui/material';\nimport { FcUpload } from \"react-icons/fc\";\nimport { LinearProgress } from '@mui/material';\n\n/**\r\n * MyDropzone component that enables drag and drop of log files and provides the file contents to the parent component\r\n *\r\n * @param {Object} props - React props object\r\n * @param {Function} props.getAnswer - Function to receive the contents of the file dropped\r\n *\r\n * @returns {JSX.Element} React component with a Card and drag and drop functionality\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MyDropzone(props) {\n  _s();\n  const [progress, setProgress] = useState(0); // Define a state variable for the upload progress and initialize it to zero.\n  const onDrop = useCallback(acceptedFiles => {\n    // Define a callback function that is invoked when a file is dropped in the dropzone.\n    acceptedFiles.forEach(file => {\n      // Iterate through each accepted file and read its content using FileReader.\n      const reader = new FileReader();\n      reader.onabort = () => alert('file reading was aborted'); // Set up event listeners for FileReader to handle errors and progress.\n      reader.onerror = () => alert('file reading has failed');\n      reader.onprogress = data => {\n        console.log(\"loading\");\n        let pr = Math.ceil(data.loaded / data.total * 100); // Calculate the upload progress and update the state.\n        console.log(pr);\n        setProgress(pr);\n      };\n      file.text().then(\n      // Read the text content of the file and pass it to the parent component using a prop.\n      ans => {\n        props.getAnswer(ans);\n      });\n    });\n  }, [progress]);\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop\n  }); // Use the useDropzone hook to get props for the dropzone area.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ...getRootProps(),\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      ...getInputProps()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      elevation: \"20\",\n      variant: \"outlined\",\n      alignItems: \"center\",\n      sx: {\n        width: '50%',\n        margin: '0 auto'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          \"text-align\": \"center\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Drag and drop a log file here, or click to select files\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FcUpload, {\n          size: \"100\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), \"  \", /*#__PURE__*/_jsxDEV(LinearProgress, {\n          variant: \"determinate\",\n          value: progress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(MyDropzone, \"/IFqHtSPv3fmKUO0Pk8+7e6AntY=\", false, function () {\n  return [useDropzone];\n});\n_c = MyDropzone;\nexport default MyDropzone;\nvar _c;\n$RefreshReg$(_c, \"MyDropzone\");","map":{"version":3,"names":["React","useCallback","createRef","useState","useDropzone","Card","FcUpload","LinearProgress","MyDropzone","props","progress","setProgress","onDrop","acceptedFiles","forEach","file","reader","FileReader","onabort","alert","onerror","onprogress","data","console","log","pr","Math","ceil","loaded","total","text","then","ans","getAnswer","getRootProps","getInputProps","width","margin"],"sources":["D:/Docs/Uni/WiSe22/thesis/impl/log-viewer/client/src/components/MyDropzone.js"],"sourcesContent":["import React, {useCallback, createRef, useState} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport { Card } from '@mui/material'\r\nimport {FcUpload} from \"react-icons/fc\"\r\nimport {LinearProgress} from '@mui/material'\r\n\r\n\r\n/**\r\n * MyDropzone component that enables drag and drop of log files and provides the file contents to the parent component\r\n *\r\n * @param {Object} props - React props object\r\n * @param {Function} props.getAnswer - Function to receive the contents of the file dropped\r\n *\r\n * @returns {JSX.Element} React component with a Card and drag and drop functionality\r\n */\r\nfunction MyDropzone(props) {\r\n  const [progress, setProgress] = useState(0) // Define a state variable for the upload progress and initialize it to zero.\r\n  const onDrop = useCallback((acceptedFiles) => { // Define a callback function that is invoked when a file is dropped in the dropzone.\r\n    acceptedFiles.forEach((file) => { // Iterate through each accepted file and read its content using FileReader.\r\n      const reader = new FileReader()\r\n\r\n      reader.onabort = () => alert('file reading was aborted') // Set up event listeners for FileReader to handle errors and progress.\r\n      reader.onerror = () => alert('file reading has failed')\r\n      reader.onprogress = (data) => {\r\n        console.log(\"loading\")\r\n        let pr = Math.ceil(data.loaded / data.total * 100) // Calculate the upload progress and update the state.\r\n        console.log(pr)\r\n        setProgress(pr)\r\n      }\r\n      \r\n     file.text().then( // Read the text content of the file and pass it to the parent component using a prop.\r\n        (ans)=>{\r\n          props.getAnswer(ans)\r\n        }\r\n      )\r\n    })\r\n    \r\n  }, [progress])\r\n  const {getRootProps, getInputProps} = useDropzone({onDrop}) // Use the useDropzone hook to get props for the dropzone area.\r\n\r\n  return (\r\n    <div {...getRootProps()}>\r\n      <input {...getInputProps()} />\r\n      <Card elevation={\"20\"} variant=\"outlined\" alignItems=\"center\" sx={{ width:'50%', margin: '0 auto'}}>{\r\n        <div style={{\"text-align\": \"center\"}}>\r\n          <h3>Drag and drop a log file here, or click to select files</h3>\r\n          <FcUpload size=\"100\" />  {/* Render an icon for uploading files. */}\r\n          <LinearProgress variant=\"determinate\" value={progress} /> {/* Render a progress bar to show the upload progress. */}\r\n        </div>\r\n      }</Card>\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MyDropzone\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,WAAW,EAAEC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAC7D,SAAQC,WAAW,QAAO,gBAAgB;AAC1C,SAASC,IAAI,QAAQ,eAAe;AACpC,SAAQC,QAAQ,QAAO,gBAAgB;AACvC,SAAQC,cAAc,QAAO,eAAe;;AAG5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAQA,SAASC,UAAU,CAACC,KAAK,EAAE;EAAA;EACzB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC,EAAC;EAC5C,MAAMS,MAAM,GAAGX,WAAW,CAAEY,aAAa,IAAK;IAAE;IAC9CA,aAAa,CAACC,OAAO,CAAEC,IAAI,IAAK;MAAE;MAChC,MAAMC,MAAM,GAAG,IAAIC,UAAU,EAAE;MAE/BD,MAAM,CAACE,OAAO,GAAG,MAAMC,KAAK,CAAC,0BAA0B,CAAC,EAAC;MACzDH,MAAM,CAACI,OAAO,GAAG,MAAMD,KAAK,CAAC,yBAAyB,CAAC;MACvDH,MAAM,CAACK,UAAU,GAAIC,IAAI,IAAK;QAC5BC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;QACtB,IAAIC,EAAE,GAAGC,IAAI,CAACC,IAAI,CAACL,IAAI,CAACM,MAAM,GAAGN,IAAI,CAACO,KAAK,GAAG,GAAG,CAAC,EAAC;QACnDN,OAAO,CAACC,GAAG,CAACC,EAAE,CAAC;QACfd,WAAW,CAACc,EAAE,CAAC;MACjB,CAAC;MAEFV,IAAI,CAACe,IAAI,EAAE,CAACC,IAAI;MAAE;MACdC,GAAG,IAAG;QACLvB,KAAK,CAACwB,SAAS,CAACD,GAAG,CAAC;MACtB,CAAC,CACF;IACH,CAAC,CAAC;EAEJ,CAAC,EAAE,CAACtB,QAAQ,CAAC,CAAC;EACd,MAAM;IAACwB,YAAY;IAAEC;EAAa,CAAC,GAAG/B,WAAW,CAAC;IAACQ;EAAM,CAAC,CAAC,EAAC;;EAE5D,oBACE;IAAA,GAASsB,YAAY,EAAE;IAAA,wBACrB;MAAA,GAAWC,aAAa;IAAE;MAAA;MAAA;MAAA;IAAA,QAAI,eAC9B,QAAC,IAAI;MAAC,SAAS,EAAE,IAAK;MAAC,OAAO,EAAC,UAAU;MAAC,UAAU,EAAC,QAAQ;MAAC,EAAE,EAAE;QAAEC,KAAK,EAAC,KAAK;QAAEC,MAAM,EAAE;MAAQ,CAAE;MAAA,uBACjG;QAAK,KAAK,EAAE;UAAC,YAAY,EAAE;QAAQ,CAAE;QAAA,wBACnC;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAAgE,eAChE,QAAC,QAAQ;UAAC,IAAI,EAAC;QAAK;UAAA;UAAA;UAAA;QAAA,QAAG,qBACvB,QAAC,cAAc;UAAC,OAAO,EAAC,aAAa;UAAC,KAAK,EAAE3B;QAAS;UAAA;UAAA;UAAA;QAAA,QAAG;MAAA;QAAA;QAAA;QAAA;MAAA;IACrD;MAAA;MAAA;MAAA;IAAA,QACA;EAAA;IAAA;IAAA;IAAA;EAAA,QAEJ;AAEV;AAAC,GAtCQF,UAAU;EAAA,QAuBqBJ,WAAW;AAAA;AAAA,KAvB1CI,UAAU;AAwCnB,eAAeA,UAAU;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}