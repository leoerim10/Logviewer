{"ast":null,"code":"var _jsxFileName = \"D:\\\\Docs\\\\Uni\\\\WiSe22\\\\thesis\\\\impl\\\\log-viewer\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport React, { useEffect, useState } from 'react';\nimport MyDropzone from './components/MyDropzone';\nimport MyTable from './components/MyTable';\nimport Metainfo from './components/Metainfo';\nimport SortedList from './components/SortedList';\nimport Navbar from './components/Navbar';\nimport Paper from '@mui/material/Paper';\nimport Box from '@mui/material/Box';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [answer, setAnswer] = useState(null); //stores the provided log data\n\n  const [filterVal, setFilterVal] = useState(\"\"); // filtered value from sorted list to my table\n\n  const [query, setQuery] = useState(\"\"); // query for search\n\n  const [filteredResults, setFilteredResults] = useState([]); // result for sorted list\n\n  const [searched, setSearched] = useState(false); // searched results\n\n  /*\n  a callback function to be sent to the child component \"Aggregation\" to fetch back\n  the name of item to be filtered in the table\n  \n  @params: childData: data to be sent by child upon some event\n  @return : -\n   the functions sets the filter term to filterVal which in turn can be sent to \n  another child component \"CollpsibleTable\" as an attribute. \n  */\n  function getFilterValFromChild(childData) {\n    // console.log(childData)\n    setFilterVal(childData);\n  }\n\n  /**\n  * Handles the file upload functionality by converting the dropped file to JSON and updating the answer state\n  *\n  * @param {Object} childFileData - the data object containing the dropped file\n  * @returns {void}\n  */\n  function getFileFromDropZone(childFileData) {\n    //console.log(childFileData)\n    setAnswer(convertFileToJson(childFileData));\n  }\n\n  /**\n  * Handles the search functionality by filtering the answer array based on the search query (q)\n  *\n  * @param {string} q - the search query to filter the answer array\n  * @returns {void}\n  */\n  const handleSearch = q => {\n    setQuery(q); // Update the state with the current search query\n    const results = answer.filter(item => JSON.stringify(item).toLowerCase().includes(q.toLowerCase())); // Filter the answer array based on the search query (q)\n    setFilteredResults(results); // Update the state with the filtered results\n  };\n\n  /**\n  * Handles the clear functionality by resetting the search query and searched state\n  *\n  * @returns {void}\n  */\n  const handleClear = () => {\n    setQuery(\"\"); // Reset the search query to an empty string\n    setSearched(false); // Reset the searched state to false\n  };\n\n  /**\n   * Maps and displays the filtered results in a table format with highlighting of searched query\n   *\n   * @returns {JSX.Element[]} An array of JSX elements representing the filtered results in a table format\n   */\n  const results = filteredResults.map((item, index) => /*#__PURE__*/_jsxDEV(\"table\", {\n    children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: Object.entries(item).map(_ref => {\n        let [key, value] = _ref;\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: key\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [typeof value === \"string\" && value.split(new RegExp(`(${query})`, \"gi\")).map((part, i) => /*#__PURE__*/_jsxDEV(\"span\", {\n              style: part.toLowerCase() === query.toLowerCase() ? {\n                backgroundColor: \"yellow\"\n              } : {},\n              children: part\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 19\n            }, this)), typeof value !== \"string\" && Array.isArray(value) && value.map((val, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: typeof val === \"string\" ? val.split(new RegExp(`(${query})`, \"gi\")).map((part, j) => /*#__PURE__*/_jsxDEV(\"span\", {\n                style: part.toLowerCase() === query.toLowerCase() ? {\n                  backgroundColor: \"yellow\"\n                } : {},\n                children: part\n              }, j, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 25\n              }, this)) : JSON.stringify(val)\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 19\n            }, this)), typeof value !== \"string\" && !Array.isArray(value) && value !== null && typeof value === \"object\" && Object.entries(value).map(_ref2 => {\n              let [k, v] = _ref2;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: [k, \": \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 120,\n                  columnNumber: 21\n                }, this), typeof v === \"string\" ? v.split(new RegExp(`(${query})`, \"gi\")).map((part, j) => /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: part.toLowerCase() === query.toLowerCase() ? {\n                    backgroundColor: \"yellow\"\n                  } : {},\n                  children: part\n                }, j, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 123,\n                  columnNumber: 25\n                }, this)) : JSON.stringify(v)]\n              }, k, true, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 19\n              }, this);\n            }), typeof value !== \"string\" && !Array.isArray(value) && (value === null || typeof value !== \"object\") && JSON.stringify(value)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this)]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this));\n\n  /**\n  * Converts a string of newline separated JSON objects into an array of JavaScript objects.\n  * \n  * @param {string} fileContent - The string to convert.\n  * @returns {Array} An array of JavaScript objects.\n  */\n  function convertFileToJson(fileContent) {\n    const value = fileContent; // Store the file contents in a variable.\n    const jsonArr = []; // Initialize an empty array to store the JSON objects.\n\n    // Split the file contents into an array of lines, and iterate through each line.\n    value.split(\"\\n\").forEach(function (line) {\n      try {\n        const jsonObj = JSON.parse(line); // Parse the line as a JSON object.\n        jsonArr.push(jsonObj); // Add the JSON object to the array.\n      } catch (error) {\n        // If a line is not valid JSON, ignore it and move on to the next line.\n      }\n    });\n    return jsonArr; // Return the array of JSON objects.\n  }\n\n  /////////////////////////////////////////////////////////////////////\n  ////////// DONT DELETE this useEffect() comment //////////\n  ////////////////////////////////////////////////////////////////////\n\n  // fetch the log files from backend as string and parse it later as an json object\n  const api = '/getLogData';\n  const [file, setFile] = useState();\n  useEffect(() => {\n    /*     const getData = async () => {\n          const jsonArr = []\n          const response = await fetch(api);\n          const reader = response.body.pipeThrough(new TextDecoderStream()).getReader();\n        \n        while (true){\n          const {value, done} = await reader.read();\n          if (done) break;\n          value.split(\"\\n\").forEach(function(line) {\n            try{\n              const jsonObj = JSON.parse(line);\n              jsonArr.push(jsonObj)\n              //console.log(jsonObj)\n            }catch(error){\n              //console.log(\"End of log files\");\n            }\n          }\n          )\n        }\n        return jsonArr;\n      }\n      getData().then(elem => {\n        //console.log(JSON.stringify(elem))\n        setAnswer(elem)\n        \n      }) */\n  }, [answer]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Navbar, {\n        handleSearch: handleSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 8\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(MyDropzone, {\n        getAnswer: getFileFromDropZone\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 8\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: results\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      style: {\n        marginBottom: 25\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 5\n    }, this), answer ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Metainfo, {\n        logObj: answer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(Paper, {\n        style: {\n          marginBottom: 50\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        style: {\n          flexDirection: 'row'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Paper, {\n          style: {\n            flex: 1\n          },\n          children: /*#__PURE__*/_jsxDEV(SortedList, {\n            logObj: answer,\n            filterAttr: getFilterValFromChild\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 39\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Paper, {\n          style: {\n            flex: 1\n          },\n          children: /*#__PURE__*/_jsxDEV(MyTable, {\n            logObj: answer,\n            filterAttr: filterVal\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 39\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          fontSize: 50,\n          fontFamily: 'Arial, sans-serif'\n        },\n        children: \"Welcome to Quentic Logviewer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"./quenticlogohq.png\",\n        style: {\n          width: '300px',\n          height: '300px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 212,\n    columnNumber: 3\n  }, this);\n}\n_s(App, \"y6S9hkN7PE6IwxdjgPJTwHpbcVw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","MyDropzone","MyTable","Metainfo","SortedList","Navbar","Paper","Box","App","answer","setAnswer","filterVal","setFilterVal","query","setQuery","filteredResults","setFilteredResults","searched","setSearched","getFilterValFromChild","childData","getFileFromDropZone","childFileData","convertFileToJson","handleSearch","q","results","filter","item","JSON","stringify","toLowerCase","includes","handleClear","map","index","Object","entries","key","value","split","RegExp","part","i","backgroundColor","Array","isArray","val","j","k","v","fileContent","jsonArr","forEach","line","jsonObj","parse","push","error","api","file","setFile","marginBottom","flexDirection","flex","fontSize","fontFamily","width","height"],"sources":["D:/Docs/Uni/WiSe22/thesis/impl/log-viewer/client/src/App.js"],"sourcesContent":["import './App.css';\nimport React, {useEffect, useState} from 'react';\nimport MyDropzone from './components/MyDropzone';\nimport MyTable from './components/MyTable';\nimport Metainfo from './components/Metainfo';\nimport SortedList from './components/SortedList';\nimport Navbar from './components/Navbar';\nimport Paper from '@mui/material/Paper';\nimport Box from '@mui/material/Box';\n\nfunction App() {\n     const [answer, setAnswer] = useState(null); //stores the provided log data\n\n     const [filterVal, setFilterVal] = useState(\"\") // filtered value from sorted list to my table\n\n     const [query, setQuery] = useState(\"\"); // query for search\n\n     const [filteredResults, setFilteredResults] = useState([]); // result for sorted list\n\n     const [searched, setSearched] = useState(false); // searched results\n\n  /*\n  a callback function to be sent to the child component \"Aggregation\" to fetch back\n  the name of item to be filtered in the table\n  \n  @params: childData: data to be sent by child upon some event\n  @return : -\n\n  the functions sets the filter term to filterVal which in turn can be sent to \n  another child component \"CollpsibleTable\" as an attribute. \n  */\n  function getFilterValFromChild(childData){\n   // console.log(childData)\n    setFilterVal(childData)\n  }\n\n  /**\n * Handles the file upload functionality by converting the dropped file to JSON and updating the answer state\n *\n * @param {Object} childFileData - the data object containing the dropped file\n * @returns {void}\n */\n  function getFileFromDropZone(childFileData){\n    //console.log(childFileData)\n    setAnswer(convertFileToJson(childFileData))\n  }\n\n  /**\n * Handles the search functionality by filtering the answer array based on the search query (q)\n *\n * @param {string} q - the search query to filter the answer array\n * @returns {void}\n */\n  const handleSearch = (q) => {\n    setQuery(q); // Update the state with the current search query\n    const results = answer.filter((item) =>\n      JSON.stringify(item).toLowerCase().includes(q.toLowerCase())\n    ); // Filter the answer array based on the search query (q)\n    setFilteredResults(results); // Update the state with the filtered results\n  };\n\n /**\n * Handles the clear functionality by resetting the search query and searched state\n *\n * @returns {void}\n */\nconst handleClear = () => {\n  setQuery(\"\"); // Reset the search query to an empty string\n  setSearched(false); // Reset the searched state to false\n};\n\n\n/**\n * Maps and displays the filtered results in a table format with highlighting of searched query\n *\n * @returns {JSX.Element[]} An array of JSX elements representing the filtered results in a table format\n */\n  const results = filteredResults.map((item, index) => (\n    <table key={index}>\n      <tbody>\n        {Object.entries(item).map(([key, value]) => (\n          <tr key={key}>\n            <th>{key}</th>\n            <td>\n              {typeof value === \"string\" &&\n                value.split(new RegExp(`(${query})`, \"gi\")).map((part, i) => (\n                  <span\n                    key={i}\n                    style={\n                      part.toLowerCase() === query.toLowerCase()\n                        ? { backgroundColor: \"yellow\" }\n                        : {}\n                    }\n                  >\n                    {part}\n                  </span>\n                ))}\n              {typeof value !== \"string\" && Array.isArray(value) && value.map((val, i) => (\n                  <div key={i}>\n                    {typeof val === \"string\" ? (\n                      val.split(new RegExp(`(${query})`, \"gi\")).map((part, j) => (\n                        <span\n                          key={j}\n                          style={\n                            part.toLowerCase() === query.toLowerCase()\n                              ? { backgroundColor: \"yellow\" }\n                              : {}\n                          }\n                        >\n                          {part}\n                        </span>\n                      ))\n                    ) : (\n                      JSON.stringify(val)\n                    )}\n                  </div>\n                ))}\n              {typeof value !== \"string\" && !Array.isArray(value) && value !== null && typeof value === \"object\" && Object.entries(value).map(([k, v]) => (\n                  <div key={k}>\n                    <strong>{k}: </strong>\n                    {typeof v === \"string\" ? (\n                      v.split(new RegExp(`(${query})`, \"gi\")).map((part, j) => (\n                        <span\n                          key={j}\n                          style={\n                            part.toLowerCase() === query.toLowerCase()\n                              ? { backgroundColor: \"yellow\" }\n                              : {}\n                          }\n                        >\n                          {part}\n                        </span>\n                      ))\n                    ) : (\n                      JSON.stringify(v)\n                    )}\n                  </div>\n                ))}\n              {typeof value !== \"string\" && !Array.isArray(value) && (value === null || typeof value !== \"object\") && JSON.stringify(value)}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  ));\n  \n  \n  \n  \n  /**\n * Converts a string of newline separated JSON objects into an array of JavaScript objects.\n * \n * @param {string} fileContent - The string to convert.\n * @returns {Array} An array of JavaScript objects.\n */\n function convertFileToJson(fileContent){\n    const value = fileContent; // Store the file contents in a variable.\n    const jsonArr = [] // Initialize an empty array to store the JSON objects.\n  \n    // Split the file contents into an array of lines, and iterate through each line.\n    value.split(\"\\n\").forEach(function(line) {\n      try{\n        const jsonObj = JSON.parse(line); // Parse the line as a JSON object.\n        jsonArr.push(jsonObj) // Add the JSON object to the array.\n      }catch(error){\n        // If a line is not valid JSON, ignore it and move on to the next line.\n      }\n    }\n    )\n    return jsonArr; // Return the array of JSON objects.\n  }\n \n  /////////////////////////////////////////////////////////////////////\n        ////////// DONT DELETE this useEffect() comment //////////\n  ////////////////////////////////////////////////////////////////////\n\n  // fetch the log files from backend as string and parse it later as an json object\n  const api = '/getLogData';\n  const [file, setFile] = useState()\n  useEffect(() => {\n/*     const getData = async () => {\n      const jsonArr = []\n      const response = await fetch(api);\n      const reader = response.body.pipeThrough(new TextDecoderStream()).getReader();\n    \n    while (true){\n      const {value, done} = await reader.read();\n      if (done) break;\n      value.split(\"\\n\").forEach(function(line) {\n        try{\n          const jsonObj = JSON.parse(line);\n          jsonArr.push(jsonObj)\n          //console.log(jsonObj)\n        }catch(error){\n          //console.log(\"End of log files\");\n        }\n      }\n      )\n    }\n    return jsonArr;\n  }\n  getData().then(elem => {\n    //console.log(JSON.stringify(elem))\n    setAnswer(elem)\n    \n  }) */\n \n},[answer]); \n\n\nreturn (\n  <div className='App'>\n    <div>\n      {/* The Navbar component */}\n      {<Navbar handleSearch={handleSearch}/>} \n    </div>\n    <div>\n      {/* The MyDropzone component with a prop of getAnswer */}\n      {<MyDropzone getAnswer={getFileFromDropZone} />}\n    </div>\n    <div>\n    {/* <Button onClick={handleClear}>Clear Search Results</Button> */}\n     {/* result of searched term */}\n      {results}\n    </div>\n    \n    <Paper style={{ marginBottom: 25}}></Paper>\n    { /* A conditional rendering based on the existence of the \"answer\" state. If \"answer\" is truthy, display the following subcomponents */}\n    {\n      answer?\n\n      <div>\n        {/* The Metainfo component with a prop of logObj set to the \"answer\" state */}\n        {<Metainfo logObj={answer}/>}\n        <Paper style={{ marginBottom: 50}}></Paper>\n        <Box display=\"flex\" style={{ flexDirection: 'row' }}>\n          {/* A Paper component containing the SortedList component with props of logObj and filterAttr */}\n          <Paper style={{ flex: 1 }}>{<SortedList logObj={answer} filterAttr={getFilterValFromChild} />}</Paper>\n          {/* A Paper component containing the MyTable component with props of logObj and filterAttr */}\n          <Paper style={{ flex: 1 }}>{<MyTable logObj={answer} filterAttr={filterVal} />}</Paper>\n        </Box>\n        \n        \n        {/* !file?<ComponentWithoutFile />: <ComponentWithFile />\n            or\n            file?<ComponentWithFile />: <ComponentWithoutFile> */}\n        { /* If \"answer\" is falsy, display the following subcomponents */}\n      </div>:\n      <div>\n        <h1 style={{ fontSize: 50, fontFamily: 'Arial, sans-serif' }}>Welcome to Quentic Logviewer</h1>\n        <img src=\"./quenticlogohq.png\" style={{ width: '300px', height: '300px' }} />\n      </div>\n    }\n  </div>\n);\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}